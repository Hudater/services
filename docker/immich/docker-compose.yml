version: "3.8"

name: immich

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: [ "start.sh", "immich" ]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ${BAK_CFG_DIR}/immich/.env
    depends_on:
      - redis
      - database
      - typesense
    restart: always
    networks:
      - proxy
    # labels:
    #   traefik.enable: "true"
    #   traefik.http.services.media-immich-api.loadbalancer.server.port: "3001"
    #   traefik.http.routers.media-immich-api.rule: "Host(`immich.${CF_DOMAIN}`) && Pathprefix(`/api`)"
    #   traefik.http.routers.media-immich-api.middlewares: service-immich-api-strip
    #   traefik.http.middlewares.service-immich-api-strip.stripprefix.prefixes: "/api"
    #   traefik.http.routers.media-immich-api.tls: true
    #   # traefik.http.routers.media-immich-api.tls.certresolver: letsencrypt
    #   # traefik.http.routers.media-immich-api.tls.domains[0].main: "*.domain.tld"
    #   traefik.http.routers.media-immich-api.entrypoints: https

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    extends:
      file: hwaccel.yml
      service: hwaccel
    command: [ "start.sh", "microservices" ]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ${BAK_CFG_DIR}/immich/.env
    depends_on:
      - redis
      - database
      - typesense
    restart: always
    networks:
      - proxy

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - ${CFG_DIR}/immich/immich_model-cache:/cache
    env_file:
      - ${BAK_CFG_DIR}/immich/.env
    restart: always
    networks:
      - proxy

  immich-web:
    container_name: immich_web
    image: ghcr.io/immich-app/immich-web:${IMMICH_VERSION:-release}
    env_file:
      - ${BAK_CFG_DIR}/immich/.env
    restart: always
    networks:
      - proxy
    # labels:
    #   traefik.enable: "true"
    #   traefik.http.services.media-immich.loadbalancer.server.port: "3000"
    #   traefik.http.routers.media-immich.rule: "Host(`immich.${CF_DOMAIN}`)"
    #   traefik.http.routers.media-immich.tls: true
    #   # traefik.http.routers.media-immich.tls.certresolver: letsencrypt
    #   # traefik.http.routers.media-immich.tls.domains[0].main: "*.domain.tld"
    #   traefik.http.routers.media-immich.entrypoints: https

  typesense:
    container_name: immich_typesense
    image: typesense/typesense:0.24.1@sha256:9bcff2b829f12074426ca044b56160ca9d777a0c488303469143dd9f8259d4dd
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
      # remove this to get debug messages
      - GLOG_minloglevel=1
    volumes:
      - ${CFG_DIR}/immich/immich_typesense:/data
    restart: always
    networks:
      - proxy

  redis:
    container_name: immich_redis
    image: redis:6.2-alpine@sha256:3995fe6ea6a619313e31046bd3c8643f9e70f8f2b294ff82659d409b47d06abb
    restart: always
    networks:
      - proxy

  database:
    container_name: immich_postgres
    image: postgres:14-alpine@sha256:874f566dd512d79cf74f59754833e869ae76ece96716d153b0fa3e64aec88d92
    env_file:
      - ${BAK_CFG_DIR}/immich/.env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - ${DB_CFG_DIR}/immich_postgres:/var/lib/postgresql/data
    restart: always
    networks:
      - proxy

  immich:
    container_name: immich_proxy
    image: ghcr.io/immich-app/immich-proxy:${IMMICH_VERSION:-release}
    ports:
      - 2283:8080
    depends_on:
      - immich-server
      - immich-web
    restart: always
    networks:
      - proxy
    labels:
      traefik.enable: true
      traefik.http.routers.immich-immich.rule: Host(`immich.${CF_DOMAIN}`) && Pathprefix(`/api`)"
      # traefik.http.services.media-immich-api.loadbalancer.server.port: "3001"
      # traefik.http.routers.media-immich-api.rule: "Host(`immich.${CF_DOMAIN}`) && Pathprefix(`/api`)"
      # traefik.http.routers.https-immich-immich.middlewares: service-immich-api-strip
      # traefik.http.middlewares.https-immich-immich.stripprefix.prefixes: "/api"

networks:
  proxy:
    external: true
