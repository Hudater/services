---
## NOTE: traefik labels not used in favor of dynamic config file
services:
  headplane:
    image: ghcr.io/tale/headplane:latest
    container_name: headplane
    restart: unless-stopped
    # ports:
    #   - '3000:3000'
    volumes:
      - "${BAK_CFG_DIR}/headscale/plane/conf/config.yaml:/etc/headplane/config.yaml"
      # This should match headscale.config_path in your config.yaml
      - "${BAK_CFG_DIR}/headscale/scale/conf/config.yaml:/etc/headscale/config.yaml"
      # Headplane stores its data in this directory
      - "${BAK_CFG_DIR}/headscale/plane/data:/var/lib/headplane"
      # If you are using the Docker integration, mount the Docker socket
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      - proxy
    labels:
      com.centurylinklabs.watchtower.monitor-only: "true"

  # headscale-admin:
  #     image: goodieshq/headscale-admin:latest
  #     container_name: headscale-admin
  #     restart: unless-stopped
  #     networks:
  #       - proxy
  #     labels:
  #       com.centurylinklabs.watchtower.monitor-only: "true"

  headscale:
    image: ghcr.io/juanfont/headscale:latest
    container_name: headscale
    restart: unless-stopped
    # depends_on:
    #   - certs-dumper
    env_file:
      - "${BAK_CFG_DIR}/headscale/.env"
    command: serve
    ports:
      - "3478:3478/udp" # stun server
      # - "50443:50443" # grpc
      #- "41641:41641/udp" # used by tailscale wireguard on the client so exposing it helps in direct connections
    #   - '8080:8080'
    volumes:
      - "${BAK_CFG_DIR}/headscale/scale/data:/var/lib/headscale"
      - "${BAK_CFG_DIR}/headscale/scale/certs:/etc/headscale/certs"
      - "${BAK_CFG_DIR}/headscale/scale/conf:/etc/headscale"
      - "${BAK_CFG_DIR}/headscale/scale/conf/derp.yaml:/etc/headscale/derp.yaml"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      - proxy
    labels:
      com.centurylinklabs.watchtower.monitor-only: "true"

## don't need certs-dumper since traefik is handling tls for grpc now
  # certs-dumper:
  #   image: ldez/traefik-certs-dumper:latest
  #   restart: unless-stopped
  #   container_name: headscale-certs-dumper
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   # entrypoint:
  #   #   - "/bin/sh"
  #   #   - "-c"
  #   #   - |
  #   #     while true; do
  #   #       traefik-certs-dumper file \
  #   #         --version v3 \
  #   #         --source /data/acme.json \
  #   #         --domain "*.domain.com" \
  #   #         --crt-name fullchain.pem \
  #   #         --key-name privkey.pem \
  #   #         --output /output
  #   #       sleep 12h
  #   #     done
  #   entrypoint: sh -c '
  #     while ! [ -e /data/acme.json ]
  #     || ! [ `jq ".[] | .Certificates | length" /data/acme.json | jq -s "add" ` != 0 ]; do
  #     sleep 1
  #     ; done
  #     && traefik-certs-dumper file --version v3 --watch
  #     --source /data/acme.json --domain-subdir --crt-name=fullchain --crt-ext=.pem --key-name=privkey --key-ext=.pem --dest /output --post-hook "chown -R $PUID:$PGID /output"'
  #   volumes:
  #     - "${BAK_CFG_DIR}/traefik:/data:ro"
  #     - "${BAK_CFG_DIR}/headscale/scale/certs:/output"

networks:
    proxy:
        external: true
