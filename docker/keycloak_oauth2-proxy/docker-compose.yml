---
services:
    postgresql:
        image: postgres:17
        container_name: "keycloak-postgres"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        env_file:
            - "${BAK_CFG_DIR}/keycloak/.env"
        volumes:
            - "${DB_CFG_DIR}/keycloak_postgresql:/var/lib/postgresql/data"
        networks:
            - proxy
        labels:
            com.centurylinklabs.watchtower.monitor-only: true #to only monitor update with watchtower not install
    keycloak:
        image: quay.io/keycloak/keycloak:26.4
        container_name: "keycloak"
        restart: always
        command: start
        # healthcheck:
        #     test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/health/live']
        #     interval: 5s
        #     timeout: 5s
        #     retries: 30
        healthcheck:
            test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { java.net.URI uri = java.net.URI.create(args[0]); System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)uri.toURL().openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
            interval: 5s
            timeout: 5s
            retries: 5
        # healthcheck:
        #     test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1"]
        #     interval: 30s
        #     timeout: 10s
        #     retries: 3
        depends_on:
            postgresql:
                condition: service_healthy
        env_file:
            - "${BAK_CFG_DIR}/keycloak/.env"
        networks:
            - proxy
        ports:
            - 8690:8080
        labels:
            traefik.enable: true
            # traefik.http.services.keycloak.loadbalancer.server.port: portNumber #
            # traefik.http.routers.keycloak.middlewares: oauth@file #add this to any container you want to use the Authentik web proxy
            com.centurylinklabs.watchtower.monitor-only: true #to only monitor update with watchtower not install
    oauth2proxy:
        image: quay.io/oauth2-proxy/oauth2-proxy:latest
        container_name: "oauth2-proxy"
        hostname: "oauth2-proxy-${HOSTNAME}"
        depends_on:
            # - postgresql
            # - keycloak
            postgresql:
                condition: service_healthy
            keycloak:
                condition: service_healthy
        env_file:
            - "${BAK_CFG_DIR}/oauth2-proxy/.env"
        restart: unless-stopped
        volumes:
            - "${CFG_DIR}/oauth2-proxy/templates:/templates"
            - "${BAK_CFG_DIR}/oauth2-proxy/sign_in.html:/templates/sign_in.html"
        ports:
            - 4180:4180
        networks:
            - proxy
        labels:
            - traefik.enable=true
            - traefik.http.routers.oauth2proxy.rule=Host(`keycloak.${CF_DOMAIN}`) && PathPrefix(`/oauth2`) || PathPrefix(`/oauth2`)
            - traefik.http.services.oauth2proxy.loadbalancer.server.port=4180

networks:
    proxy:
        external: true
